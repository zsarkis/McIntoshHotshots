@page "/live-scoring"
@using McIntoshHotshots.Model
@using McIntoshHotshots.Services
@using McIntoshHotshots.Repo
@inject ILiveMatchService LiveMatchService
@inject IPlayerRepo PlayerRepo
@inject IUserPerformanceService UserPerformanceService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Live Scoring - McIntosh Hotshots</PageTitle>

<div class="dart-scorer">
    @if (currentMatch == null)
    {
        <MatchSetup Players="players" 
                   ActiveMatches="activeMatches"
                   OnMatchStarted="OnMatchStarted" 
                   OnResumeMatch="ResumeMatchById"
                   OnPlayersChanged="OnPlayersChanged" />
    }
    else
    {
        <!-- Main Scoring Interface -->
        <div class="scoring-board">
            <!-- Header with scores -->
            <div class="score-header">
                <div class="player-section home @(currentMatch.IsCurrentPlayerTurn(currentMatch.HomePlayerId) ? "active" : "")">
                    <div class="player-label">Home</div>
                    <div class="player-name">@currentMatch.HomePlayerName</div>
                    <div class="player-score">@currentMatch.HomeCurrentScore</div>
                </div>
                
                <div class="center-section">
                    <div class="app-branding">
                        <div class="brand-logo">MCINTOSH</div>
                        <div class="brand-sub">HOTSHOTS</div>
                        <div class="match-info">LEG @currentMatch.CurrentLegNumber</div>
                    </div>
                </div>
                
                <div class="player-section away @(currentMatch.IsCurrentPlayerTurn(currentMatch.AwayPlayerId) ? "active" : "")">
                    <div class="player-label">Away</div>
                    <div class="player-name">@currentMatch.AwayPlayerName</div>
                    <div class="player-score">@currentMatch.AwayCurrentScore</div>
                </div>
            </div>
            
            <!-- Game Status -->
            <div class="game-status">
                <div class="current-leg">@currentMatch.HomeLegsWon - @currentMatch.AwayLegsWon Leg Count</div>
                <div class="player-turn">@currentMatch.GetPlayerName(currentMatch.CurrentPlayerId)</div>
                <div class="dart-indicators">
                    @for (int i = 1; i <= 3; i++)
                    {
                        <div class="dart-dot @(i <= currentMatch.DartsThrown ? "thrown" : "")"></div>
                    }
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-alert">@errorMessage</div>
            }
            
            @if (!useAdvancedRuleEngine)
            {
                <!-- Score Input with Box-like UI Layout -->
                <div class="score-input-container box-layout">
                    @{
                        var currentPlayerHotkeys = currentMatch?.CurrentPlayerId == currentMatch?.HomePlayerId ? homePlayerHotkeys : awayPlayerHotkeys;
                    }

                    <!-- Score Display -->
                    <div class="score-display">
                        <div class="input-score">@inputScore</div>
                        @if (currentMatch.CurrentTurnScores.Any())
                        {
                            <div class="turn-breakdown">@string.Join(" + ", currentMatch.CurrentTurnScores) = @currentMatch.CurrentTurnScores.Sum()</div>
                        }
                    </div>

                    <!-- Box Layout Container -->
                    <div class="scoring-box">
                        <!-- Left Side Hotkeys -->
                        <div class="personalized-hotkeys left">
                            @if (currentPlayerHotkeys?.LowScores?.Any() == true)
                            {
                                @foreach (var score in currentPlayerHotkeys.LowScores)
                                {
                                    <button class="personal-hotkey-btn low" @onclick="() => SetAndSubmitScore(score)"
                                            disabled="@(!CanRecordScore())">
                                        @score
                                    </button>
                                }
                            }
                        </div>

                        <!-- Center - Number Pad and Actions -->
                        <div class="center-input">
                            <!-- Simple Number Pad (standard layout) -->
                            <div class="number-pad">
                                <!-- Row 1: 1, 2, 3 -->
                                <div class="number-row">
                                    <button class="num-btn" @onclick="() => AppendDigit(1)">1</button>
                                    <button class="num-btn" @onclick="() => AppendDigit(2)">2</button>
                                    <button class="num-btn" @onclick="() => AppendDigit(3)">3</button>
                                </div>
                                <!-- Row 2: 4, 5, 6 -->
                                <div class="number-row">
                                    <button class="num-btn" @onclick="() => AppendDigit(4)">4</button>
                                    <button class="num-btn" @onclick="() => AppendDigit(5)">5</button>
                                    <button class="num-btn" @onclick="() => AppendDigit(6)">6</button>
                                </div>
                                <!-- Row 3: 7, 8, 9 -->
                                <div class="number-row">
                                    <button class="num-btn" @onclick="() => AppendDigit(7)">7</button>
                                    <button class="num-btn" @onclick="() => AppendDigit(8)">8</button>
                                    <button class="num-btn" @onclick="() => AppendDigit(9)">9</button>
                                </div>
                                <!-- Row 4: Undo, 0, Submit -->
                                <div class="number-row">
                                    <button class="action-btn @(inputScore > 0 ? "clear" : "undo")" @onclick="UndoOrClearAction">
                                        @(inputScore > 0 ? "Clear" : "Undo")
                                    </button>
                                    <button class="num-btn" @onclick="() => AppendDigit(0)">0</button>
                                    <button class="action-btn submit" @onclick="() => RecordScore(inputScore)"
                                            disabled="@(!CanRecordScore() || inputScore < 0 || inputScore > 180)">
                                        Submit
                                    </button>
                                </div>
                                <!-- Row 5: 100, 180, 140 -->
                                <div class="number-row">
                                    <button class="action-btn submit" @onclick="() => SetAndSubmitScore(100)"
                                            disabled="@(!CanRecordScore())">
                                        100
                                    </button>
                                    <button class="action-btn submit" @onclick="() => SetAndSubmitScore(180)"
                                            disabled="@(!CanRecordScore())">
                                        180
                                    </button>
                                    <button class="action-btn submit" @onclick="() => SetAndSubmitScore(140)"
                                            disabled="@(!CanRecordScore())">
                                        140
                                    </button>
                                </div>
                                <!-- Row 6: MISS -->
                                <div class="number-row">
                                    <button class="action-btn miss" @onclick="() => SetAndSubmitScore(0)"
                                            disabled="@(!CanRecordScore())">
                                        MISS
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Right Side Hotkeys -->
                        <div class="personalized-hotkeys right">
                            @if (currentPlayerHotkeys?.HighScores?.Any() == true)
                            {
                                @foreach (var score in currentPlayerHotkeys.HighScores)
                                {
                                    <button class="personal-hotkey-btn high" @onclick="() => SetAndSubmitScore(score)"
                                            disabled="@(!CanRecordScore())">
                                        @score
                                    </button>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Advanced Individual Dart Input -->
                <div class="advanced-input">
                    <div class="dart-input-header">
                        <h3>Individual Dart Input</h3>
                        <div class="current-player-info">
                            @dartsEngine?.GetCurrentPlayer().Id - Score: @dartsEngine?.GetRemainingScore(dartsEngine.GetCurrentPlayer().Id)
                        </div>
                    </div>
                    
                    <div class="dart-controls">
                        <select @bind="selectedSegment" class="segment-select">
                            <option value="">Segment</option>
                            @for (int i = 1; i <= 20; i++)
                            {
                                <option value="@i">@i</option>
                            }
                            <option value="25">25</option>
                            <option value="bull">Bull</option>
                        </select>
                        
                        <select @bind="selectedRing" class="ring-select">
                            <option value="">Ring</option>
                            <option value="single">Single</option>
                            <option value="double">Double</option>
                            <option value="treble">Treble</option>
                            <option value="fat-single">Fat Single</option>
                            <option value="skinny-single">Skinny Single</option>
                        </select>
                        
                        <button class="record-dart" @onclick="RecordIndividualDart" 
                                disabled="@(string.IsNullOrEmpty(selectedSegment) || string.IsNullOrEmpty(selectedRing))">
                            Record Dart
                        </button>
                    </div>
                </div>
            }
            
            <!-- Mode Toggle -->
            <div class="mode-toggle">
                <label class="toggle-switch">
                    <input type="checkbox" @bind="useAdvancedRuleEngine" @bind:after="OnRuleEngineToggled" />
                    <span class="toggle-slider"></span>
                    <span class="toggle-label">Advanced Mode</span>
                </label>
            </div>
            
            <!-- Match Controls -->
            <div class="match-controls">
                <button class="control-btn secondary" @onclick="BackToSetup">New Match</button>
                <button class="control-btn danger" @onclick="EndMatch">End Match</button>
            </div>
        </div>
        
        @if (currentMatch.IsFinished)
        {
            <div class="match-finished-overlay">
                <div class="finish-modal">
                    <h2>Match Complete!</h2>
                    <div class="winner-name">
                        @(currentMatch.HomeLegsWon > currentMatch.AwayLegsWon ? currentMatch.HomePlayerName : currentMatch.AwayPlayerName)
                    </div>
                    <div class="final-result">@currentMatch.HomeLegsWon - @currentMatch.AwayLegsWon</div>
                    <button class="finish-save-btn" @onclick="SaveMatch">Save Match</button>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<PlayerModel> players = new();
    private List<LiveMatch> activeMatches = new();
    private LiveMatch? currentMatch;
    private int selectedHomePlayerId = 0;
    private int selectedAwayPlayerId = 0;
    private int inputScore = 0;
    private string errorMessage = string.Empty;
    
    // Advanced Rule Engine
    private DartsRuleEngine? dartsEngine;
    private bool useAdvancedRuleEngine = false;
    private string selectedSegment = string.Empty;
    private string selectedRing = string.Empty;
    
    
    // Personalized Hotkeys
    private Services.PlayerCommonScores homePlayerHotkeys = new();
    private Services.PlayerCommonScores awayPlayerHotkeys = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPlayers();
        await LoadActiveMatches();
    }
    
    private async Task LoadPlayers()
    {
        var playerResults = await PlayerRepo.GetPlayersAsync();
        players = playerResults.ToList();
        
        if (!players.Any())
        {
            players = new List<PlayerModel>
            {
                new() { Id = 1, Name = "John Smith", EloNumber = 1200 },
                new() { Id = 2, Name = "Mike Johnson", EloNumber = 1150 },
                new() { Id = 3, Name = "Sarah Wilson", EloNumber = 1300 },
                new() { Id = 4, Name = "Dave Brown", EloNumber = 1100 },
                new() { Id = 5, Name = "Lisa Davis", EloNumber = 1250 }
            };
        }
    }
    
    private async Task LoadActiveMatches()
    {
        activeMatches = await LiveMatchService.GetActiveMatchesAsync();
    }
    
    private async Task LoadPersonalizedHotkeys()
    {
        try
        {
            if (selectedHomePlayerId > 0)
            {
                homePlayerHotkeys = await UserPerformanceService.GetPlayerCommonScoresAsync(selectedHomePlayerId);
            }
            else
            {
                homePlayerHotkeys = new Services.PlayerCommonScores();
            }
            
            if (selectedAwayPlayerId > 0)
            {
                awayPlayerHotkeys = await UserPerformanceService.GetPlayerCommonScoresAsync(selectedAwayPlayerId);
            }
            else
            {
                awayPlayerHotkeys = new Services.PlayerCommonScores();
            }
        }
        catch (Exception)
        {
            homePlayerHotkeys = new Services.PlayerCommonScores();
            awayPlayerHotkeys = new Services.PlayerCommonScores();
        }
    }
    
    private async Task OnMatchStarted(LiveMatch match)
    {
        currentMatch = match;
        selectedHomePlayerId = match.HomePlayerId;
        selectedAwayPlayerId = match.AwayPlayerId;
        await LoadPersonalizedHotkeys();
        
        if (useAdvancedRuleEngine)
        {
            dartsEngine = new DartsRuleEngine(currentMatch.HomePlayerName, currentMatch.AwayPlayerName);
        }
        
        StateHasChanged();
    }
    
    private async Task ResumeMatchById(int matchId)
    {
        await ResumeMatch(matchId);
    }
    
    private async Task ResumeMatch(int matchId)
    {
        currentMatch = await LiveMatchService.GetMatchAsync(matchId);
        
        if (currentMatch != null)
        {
            selectedHomePlayerId = currentMatch.HomePlayerId;
            selectedAwayPlayerId = currentMatch.AwayPlayerId;
            await LoadPersonalizedHotkeys();
        }
        
        if (useAdvancedRuleEngine && currentMatch != null)
        {
            dartsEngine = new DartsRuleEngine(currentMatch.HomePlayerName, currentMatch.AwayPlayerName);
        }
        
        StateHasChanged();
    }
    
    private async Task OnPlayersChanged()
    {
        await LoadPersonalizedHotkeys();
        StateHasChanged();
    }
    
    private async Task RecordScore(int score)
    {
        if (currentMatch == null || !CanRecordScore())
        {
            return;
        }

        var currentPlayerScore = currentMatch.GetPlayerScore(currentMatch.CurrentPlayerId);
        var ruleResult = DartsRuleEngine.ValidateThrow(currentPlayerScore, score);

        if (!ruleResult.IsValid)
        {
            errorMessage = ruleResult.ErrorMessage;
            StateHasChanged();
            return;
        }
        
        errorMessage = string.Empty;
        
        var success = await LiveMatchService.RecordThrowAsync(currentMatch.Id, currentMatch.CurrentPlayerId, score, 3);
        
        if (success)
        {
            currentMatch = await LiveMatchService.GetMatchAsync(currentMatch.Id);
            ClearInput();
            StateHasChanged();
        }
        else
        {
            errorMessage = "Failed to record throw. Please try again.";
            StateHasChanged();
        }
    }
    
    private async Task SetAndSubmitScore(int score)
    {
        inputScore = score;
        await RecordScore(score);
    }
    
    private async Task UndoOrClearAction()
    {
        if (inputScore > 0)
        {
            // Clear the current input
            ClearInput();
        }
        else
        {
            // Undo the last throw
            await UndoLastThrow();
        }
    }

    private async Task UndoLastThrow()
    {
        if (currentMatch != null)
        {
            await LiveMatchService.UndoLastThrowAsync(currentMatch.Id, currentMatch.CurrentPlayerId);
            currentMatch = await LiveMatchService.GetMatchAsync(currentMatch.Id);
            errorMessage = string.Empty;
            StateHasChanged();
        }
    }
    
    private async Task SaveMatch()
    {
        if (currentMatch != null && currentMatch.IsFinished)
        {
            await LiveMatchService.FinishMatchAsync(currentMatch.Id);
            currentMatch = null;
            await LoadActiveMatches();
            StateHasChanged();
        }
    }
    
    private void EndMatch()
    {
        currentMatch = null;
        errorMessage = string.Empty;
        StateHasChanged();
    }
    
    private void BackToSetup()
    {
        currentMatch = null;
        selectedHomePlayerId = 0;
        selectedAwayPlayerId = 0;
        errorMessage = string.Empty;
        StateHasChanged();
    }
    
    // Input Methods
    private void AppendDigit(int digit)
    {
        if (inputScore == 0)
        {
            inputScore = digit;
        }
        else
        {
            int newScore = inputScore * 10 + digit;
            if (newScore <= 180)
            {
                inputScore = newScore;
            }
        }
        
        errorMessage = string.Empty;
        StateHasChanged();
    }
    
    private void ClearInput()
    {
        inputScore = 0;
        errorMessage = string.Empty;
        StateHasChanged();
    }
    
    private bool CanRecordScore()
    {
        return currentMatch != null && !currentMatch.IsFinished && currentMatch.CanThrow;
    }
    
    // Advanced Mode Methods
    private async Task OnRuleEngineToggled()
    {
        if (currentMatch == null) return;
        
        if (useAdvancedRuleEngine)
        {
            if (dartsEngine == null)
            {
                dartsEngine = new DartsRuleEngine(currentMatch.HomePlayerName, currentMatch.AwayPlayerName);
            }
            
            var players = dartsEngine.GetPlayers();
            var homePlayer = players.FirstOrDefault(p => p.Id == currentMatch.HomePlayerName);
            var awayPlayer = players.FirstOrDefault(p => p.Id == currentMatch.AwayPlayerName);
            
            if (homePlayer != null) homePlayer.Score = currentMatch.HomeCurrentScore;
            if (awayPlayer != null) awayPlayer.Score = currentMatch.AwayCurrentScore;
            
            var currentPlayerName = currentMatch.CurrentPlayerId == currentMatch.HomePlayerId 
                ? currentMatch.HomePlayerName 
                : currentMatch.AwayPlayerName;
            dartsEngine.SetCurrentPlayer(currentPlayerName);
            
            errorMessage = "Advanced mode activated - individual dart tracking enabled";
        }
        else
        {
            if (dartsEngine != null)
            {
                var players = dartsEngine.GetPlayers();
                var homePlayer = players.FirstOrDefault(p => p.Id == currentMatch.HomePlayerName);
                var awayPlayer = players.FirstOrDefault(p => p.Id == currentMatch.AwayPlayerName);
                
                if (homePlayer != null) currentMatch.HomeCurrentScore = homePlayer.Score;
                if (awayPlayer != null) currentMatch.AwayCurrentScore = awayPlayer.Score;
                
                var currentEnginePlayer = dartsEngine.GetCurrentPlayer();
                if (currentEnginePlayer.Id == currentMatch.HomePlayerName)
                {
                    currentMatch.CurrentPlayerId = currentMatch.HomePlayerId;
                }
                else if (currentEnginePlayer.Id == currentMatch.AwayPlayerName)
                {
                    currentMatch.CurrentPlayerId = currentMatch.AwayPlayerId;
                }
            }
            errorMessage = "Basic mode activated - simple turn-based scoring";
        }
        
        StateHasChanged();
        
        await Task.Delay(3000);
        if (errorMessage.Contains("mode activated"))
        {
            errorMessage = string.Empty;
            StateHasChanged();
        }
    }
    
    private async Task RecordIndividualDart()
    {
        if (dartsEngine == null || string.IsNullOrEmpty(selectedSegment) || string.IsNullOrEmpty(selectedRing))
        {
            return;
        }
        
        var currentPlayerId = dartsEngine.GetCurrentPlayer().Id;
        var result = dartsEngine.RecordThrow(currentPlayerId, selectedSegment, selectedRing);
        
        if (!result.IsValid)
        {
            errorMessage = result.ErrorMessage;
            StateHasChanged();
            return;
        }
        
        errorMessage = string.Empty;
        selectedSegment = string.Empty;
        selectedRing = string.Empty;
        
        if (result.IsBust)
        {
            errorMessage = $"BUST! {result.BustReason}";
        }
        else if (result.IsFinish)
        {
            errorMessage = $"GAME OVER! {result.WinnerId} wins!";
        }
        
        StateHasChanged();
        
        if (!result.IsBust && !result.IsFinish)
        {
            await Task.Delay(2000);
            errorMessage = string.Empty;
            StateHasChanged();
        }
    }
    
}
