@page "/live-scoring"
@using McIntoshHotshots.Model
@using McIntoshHotshots.Services
@using McIntoshHotshots.Repo
@inject ILiveMatchService LiveMatchService
@inject IPlayerRepo PlayerRepo
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Live Scoring - McIntosh Hotshots</PageTitle>

<div class="dart-scorer">
    @if (currentMatch == null)
    {
        <div class="match-setup">
            <div class="setup-header">
                <h1>New Match</h1>
                <p>Select players to begin</p>
            </div>
            
            <div class="player-selection">
                <div class="player-select">
                    <label>Home Player</label>
                    <select @bind="selectedHomePlayerId">
                        <option value="0">Select Player</option>
                        @foreach (var player in players)
                        {
                            <option value="@player.Id">@player.Name</option>
                        }
                    </select>
                </div>
                
                <div class="vs-text">VS</div>
                
                <div class="player-select">
                    <label>Away Player</label>
                    <select @bind="selectedAwayPlayerId">
                        <option value="0">Select Player</option>
                        @foreach (var player in players.Where(p => p.Id != selectedHomePlayerId))
                        {
                            <option value="@player.Id">@player.Name</option>
                        }
                    </select>
                </div>
            </div>
            
            <button class="start-btn" @onclick="StartMatch" disabled="@(selectedHomePlayerId == 0 || selectedAwayPlayerId == 0)">
                Start Match
            </button>
            
            @if (activeMatches.Any())
            {
                <div class="resume-section">
                    <h3>Resume Match</h3>
                    @foreach (var match in activeMatches)
                    {
                        <div class="resume-card" @onclick="() => ResumeMatch(match.Id)">
                            <span>@match.HomePlayerName vs @match.AwayPlayerName</span>
                            <span class="resume-score">@match.HomeLegsWon - @match.AwayLegsWon</span>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <!-- Main Scoring Interface -->
        <div class="scoring-board">
            <!-- Header with scores -->
            <div class="score-header">
                <div class="player-section home @(currentMatch.IsCurrentPlayerTurn(currentMatch.HomePlayerId) ? "active" : "")">
                    <div class="player-label">Home</div>
                    <div class="player-name">@currentMatch.HomePlayerName</div>
                    <div class="player-score">@currentMatch.HomeCurrentScore</div>
                </div>
                
                <div class="center-section">
                    <div class="app-branding">
                        <div class="brand-logo">DART</div>
                        <div class="brand-sub">CONNECT</div>
                        <div class="match-info">@currentMatch.CurrentLegNumber</div>
                        <div class="version">v3.21.40</div>
                    </div>
                </div>
                
                <div class="player-section away @(currentMatch.IsCurrentPlayerTurn(currentMatch.AwayPlayerId) ? "active" : "")">
                    <div class="player-label">Away</div>
                    <div class="player-name">@currentMatch.AwayPlayerName</div>
                    <div class="player-score">@currentMatch.AwayCurrentScore</div>
                </div>
            </div>
            
            <!-- Game Status -->
            <div class="game-status">
                <div class="current-leg">@currentMatch.HomeLegsWon - @currentMatch.AwayLegsWon SETS</div>
                <div class="player-turn">@currentMatch.GetPlayerName(currentMatch.CurrentPlayerId)</div>
                <div class="dart-indicators">
                    @for (int i = 1; i <= 3; i++)
                    {
                        <div class="dart-dot @(i <= currentMatch.DartsThrown ? "thrown" : "")"></div>
                    }
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-alert">@errorMessage</div>
            }
            
            @if (!useAdvancedRuleEngine)
            {
                <!-- Simple Score Input -->
                <div class="score-input">
                    <div class="score-display">
                        @if (useCalculatorMode)
                        {
                            <div class="calculator-display">
                                <div class="dart-breakdown">
                                    @if (calculatorDarts.Any())
                                    {
                                        @($"{string.Join(" + ", calculatorDarts.Select(d => d.Display))} = {calculatorDarts.Sum(d => d.Value)}")
                                    }
                                    else
                                    {
                                        <span class="placeholder">Enter individual dart scores...</span>
                                    }
                                </div>
                                <div class="calculator-total">@calculatorDarts.Sum(d => d.Value)</div>
                            </div>
                        }
                        else
                        {
                            <div class="input-score">@inputScore</div>
                            @if (currentMatch.CurrentTurnScores.Any())
                            {
                                <div class="turn-breakdown">@string.Join(" + ", currentMatch.CurrentTurnScores) = @currentMatch.CurrentTurnScores.Sum()</div>
                            }
                        }
                    </div>
                    
                    <div class="input-section">
                        @if (useCalculatorMode)
                        {
                            <!-- Calculator Mode -->
                            <div class="calculator-mode">
                                <!-- Multiplier Selection -->
                                <div class="multiplier-section">
                                    <button class="multiplier-btn @(selectedMultiplier == "S" ? "active" : "")" 
                                            @onclick='() => SetMultiplier("S")'>Single</button>
                                    <button class="multiplier-btn @(selectedMultiplier == "D" ? "active" : "")" 
                                            @onclick='() => SetMultiplier("D")'>Double</button>
                                    <button class="multiplier-btn @(selectedMultiplier == "T" ? "active" : "")" 
                                            @onclick='() => SetMultiplier("T")'>Triple</button>
                                </div>
                                
                                <!-- Number Grid -->
                                <div class="calculator-numbers">
                                    @for (int i = 1; i <= 20; i++)
                                    {
                                        int number = i; // Create local copy to avoid closure issue
                                        <button class="calc-num-btn" @onclick="() => AddDartScore(number)">@number</button>
                                    }
                                    <button class="calc-num-btn special" @onclick="() => AddDartScore(25)">25</button>
                                    <button class="calc-num-btn special" @onclick="() => AddDartScore(50)">BULL</button>
                                </div>
                                
                                <!-- Calculator Actions -->
                                <div class="calculator-actions">
                                    <button class="calc-action-btn remove" @onclick="RemoveLastDart" 
                                            disabled="@(!calculatorDarts.Any())">Remove Last</button>
                                    <button class="calc-action-btn clear" @onclick="ClearCalculator">Clear All</button>
                                    <button class="calc-action-btn submit" @onclick="SubmitCalculatorScore" 
                                            disabled="@(!CanRecordScore() || !calculatorDarts.Any() || calculatorDarts.Sum(d => d.Value) > 180)">
                                        Submit (@calculatorDarts.Sum(d => d.Value))
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <!-- Simple Number Pad -->
                            <div class="number-pad">
                                @for (int row = 0; row < 4; row++)
                                {
                                    <div class="number-row">
                                        @if (row < 3)
                                        {
                                            @for (int col = 1; col <= 3; col++)
                                            {
                                                int number = (2 - row) * 3 + col;
                                                <button class="num-btn" @onclick="() => AppendDigit(number)">@number</button>
                                            }
                                        }
                                        else
                                        {
                                            <button class="num-btn zero" @onclick="() => AppendDigit(0)">0</button>
                                        }
                                    </div>
                                }
                            </div>
                            
                            <div class="input-actions">
                                <button class="action-btn clear" @onclick="ClearInput">Clear</button>
                                <button class="action-btn undo" @onclick="UndoLastThrow">Undo</button>
                                <button class="action-btn submit" @onclick="() => RecordScore(inputScore)" 
                                        disabled="@(!CanRecordScore() || inputScore < 0 || inputScore > 180)">
                                    Submit
                                </button>
                            </div>
                        }
                        
                        <!-- Mode Toggle -->
                        <div class="calc-mode-toggle">
                            <button class="mode-toggle-btn @(!useCalculatorMode ? "active" : "")" 
                                    @onclick="() => SetCalculatorMode(false)">
                                Number Pad
                            </button>
                            <button class="mode-toggle-btn @(useCalculatorMode ? "active" : "")" 
                                    @onclick="() => SetCalculatorMode(true)">
                                Calculator
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Quick Score Buttons -->
                <div class="quick-scores">
                    @foreach (var score in new[] { 180, 140, 100, 81, 60, 45, 26, 20, 0 })
                    {
                        <button class="quick-score-btn @(score == 0 ? "miss" : "")" 
                                @onclick="() => SetAndSubmitScore(score)" 
                                disabled="@(!CanRecordScore())">
                            @(score == 0 ? "MISS" : score.ToString())
                        </button>
                    }
                </div>
            }
            else
            {
                <!-- Advanced Individual Dart Input -->
                <div class="advanced-input">
                    <div class="dart-input-header">
                        <h3>Individual Dart Input</h3>
                        <div class="current-player-info">
                            @dartsEngine?.GetCurrentPlayer().Id - Score: @dartsEngine?.GetRemainingScore(dartsEngine.GetCurrentPlayer().Id)
                        </div>
                    </div>
                    
                    <div class="dart-controls">
                        <select @bind="selectedSegment" class="segment-select">
                            <option value="">Segment</option>
                            @for (int i = 1; i <= 20; i++)
                            {
                                <option value="@i">@i</option>
                            }
                            <option value="25">25</option>
                            <option value="bull">Bull</option>
                        </select>
                        
                        <select @bind="selectedRing" class="ring-select">
                            <option value="">Ring</option>
                            <option value="single">Single</option>
                            <option value="double">Double</option>
                            <option value="treble">Treble</option>
                            <option value="fat-single">Fat Single</option>
                            <option value="skinny-single">Skinny Single</option>
                        </select>
                        
                        <button class="record-dart" @onclick="RecordIndividualDart" 
                                disabled="@(string.IsNullOrEmpty(selectedSegment) || string.IsNullOrEmpty(selectedRing))">
                            Record Dart
                        </button>
                    </div>
                </div>
            }
            
            <!-- Mode Toggle -->
            <div class="mode-toggle">
                <label class="toggle-switch">
                    <input type="checkbox" @bind="useAdvancedRuleEngine" @bind:after="OnRuleEngineToggled" />
                    <span class="toggle-slider"></span>
                    <span class="toggle-label">Advanced Mode</span>
                </label>
            </div>
            
            <!-- Match Controls -->
            <div class="match-controls">
                <button class="control-btn secondary" @onclick="BackToSetup">New Match</button>
                <button class="control-btn danger" @onclick="EndMatch">End Match</button>
            </div>
        </div>
        
        @if (currentMatch.IsFinished)
        {
            <div class="match-finished-overlay">
                <div class="finish-modal">
                    <h2>Match Complete!</h2>
                    <div class="winner-name">
                        @(currentMatch.HomeLegsWon > currentMatch.AwayLegsWon ? currentMatch.HomePlayerName : currentMatch.AwayPlayerName)
                    </div>
                    <div class="final-result">@currentMatch.HomeLegsWon - @currentMatch.AwayLegsWon</div>
                    <button class="finish-save-btn" @onclick="SaveMatch">Save Match</button>
                </div>
            </div>
        }
    }
</div>

<style>
/* Professional Dart Scoring Interface */
.dart-scorer {
    min-height: 100vh;
    background: var(--bg-primary);
    color: var(--text-primary);
    font-family: var(--font-family-primary);
}

/* Match Setup */
.match-setup {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    padding: var(--spacing-xl);
    max-width: 600px;
    margin: 0 auto;
}

.setup-header {
    text-align: center;
    margin-bottom: var(--spacing-2xl);
}

.setup-header h1 {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: var(--spacing-sm);
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.setup-header p {
    font-size: 1.125rem;
    color: var(--text-secondary);
}

.player-selection {
    display: flex;
    align-items: center;
    gap: var(--spacing-2xl);
    margin-bottom: var(--spacing-2xl);
    width: 100%;
}

.player-select {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
}

.player-select label {
    font-weight: 600;
    color: var(--text-primary);
    font-size: 1.125rem;
}

.player-select select {
    padding: var(--spacing-md);
    background: var(--bg-elevated);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-md);
    color: var(--text-primary);
    font-size: 1rem;
    transition: all var(--transition-fast);
}

.player-select select:focus {
    outline: none;
    border-color: var(--accent-primary);
    box-shadow: 0 0 0 3px var(--interactive-focus);
}

.vs-text {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--accent-primary);
    text-align: center;
    min-width: 60px;
}

.start-btn {
    padding: var(--spacing-lg) var(--spacing-2xl);
    background: var(--gradient-primary);
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-size: 1.125rem;
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-normal);
    box-shadow: var(--shadow-sm);
}

.start-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}

.start-btn:disabled {
    background: var(--bg-surface);
    color: var(--text-muted);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.resume-section {
    margin-top: var(--spacing-2xl);
    width: 100%;
}

.resume-section h3 {
    text-align: center;
    margin-bottom: var(--spacing-lg);
    color: var(--text-secondary);
}

.resume-card {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-lg);
    background: var(--bg-elevated);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-md);
    margin-bottom: var(--spacing-md);
    cursor: pointer;
    transition: all var(--transition-fast);
}

.resume-card:hover {
    background: var(--bg-surface);
    border-color: var(--border-secondary);
    transform: translateY(-1px);
}

.resume-score {
    font-weight: 600;
    color: var(--accent-primary);
}

/* Main Scoring Board */
.scoring-board {
    min-height: 100vh;
    background: var(--bg-primary);
    padding: var(--spacing-md);
    display: grid;
    grid-template-rows: auto auto 1fr auto auto;
    gap: var(--spacing-md);
    max-height: 100vh;
    overflow: hidden;
}

/* Score Header - Professional Dart Board Style */
.score-header {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    gap: var(--spacing-lg);
    padding: var(--spacing-lg);
    background: var(--bg-secondary);
    border-radius: var(--radius-lg);
    border: 2px solid var(--border-primary);
}

.player-section {
    text-align: center;
    padding: var(--spacing-md);
    border-radius: var(--radius-md);
    transition: all var(--transition-normal);
    border: 2px solid transparent;
}

.player-section.active {
    background: var(--accent-primary);
    color: white;
    border-color: var(--accent-primary);
    box-shadow: var(--shadow-lg);
}

.player-section.home.active {
    background: #dc2626; /* Red for home like in the screenshot */
}

.player-label {
    font-size: 1rem;
    font-weight: 700;
    margin-bottom: var(--spacing-xs);
    text-transform: uppercase;
    letter-spacing: 1px;
}

.player-name {
    font-size: 0.875rem;
    margin-bottom: var(--spacing-sm);
    opacity: 0.9;
}

.player-score {
    font-size: 3rem;
    font-weight: 800;
    line-height: 1;
    font-feature-settings: 'tnum';
}

.center-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background: var(--accent-error);
    color: white;
    border-radius: var(--radius-md);
    padding: var(--spacing-md);
    min-width: 100px;
}

.brand-logo {
    font-size: 1rem;
    font-weight: 700;
    color: white;
}

.brand-sub {
    font-size: 0.625rem;
    font-weight: 500;
    letter-spacing: 2px;
    margin-bottom: var(--spacing-xs);
}

.match-info {
    font-size: 1.5rem;
    font-weight: 800;
    margin: var(--spacing-xs) 0;
}

.version {
    font-size: 0.625rem;
    opacity: 0.8;
}

/* Game Status */
.game-status {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-md);
    background: var(--bg-elevated);
    border-radius: var(--radius-md);
    border: 1px solid var(--border-primary);
}

.current-leg {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-primary);
}

.player-turn {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--accent-primary);
}

.dart-indicators {
    display: flex;
    gap: var(--spacing-sm);
}

.dart-dot {
    width: 12px;
    height: 12px;
    border-radius: var(--radius-full);
    background: var(--bg-surface);
    border: 2px solid var(--border-secondary);
    transition: all var(--transition-fast);
}

.dart-dot.thrown {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
    box-shadow: 0 0 8px var(--accent-primary);
}

.error-alert {
    padding: var(--spacing-sm);
    background: var(--accent-error);
    color: white;
    border-radius: var(--radius-md);
    text-align: center;
    font-weight: 500;
    margin-bottom: var(--spacing-sm);
    font-size: 0.875rem;
}

/* Score Input - Tablet Optimized */
.score-input {
    background: var(--bg-elevated);
    border-radius: var(--radius-lg);
    padding: var(--spacing-lg);
    border: 1px solid var(--border-primary);
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: var(--spacing-lg);
    align-items: start;
}

.score-display {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-md);
}

.input-score {
    font-size: 3.5rem;
    font-weight: 800;
    color: var(--accent-primary);
    font-feature-settings: 'tnum';
    margin-bottom: var(--spacing-sm);
    line-height: 1;
}

.turn-breakdown {
    font-size: 1rem;
    color: var(--text-secondary);
    font-family: var(--font-family-mono);
}

.input-section {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
}

.number-pad {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--spacing-sm);
}

.number-row {
    display: contents;
}

.num-btn {
    width: 100%;
    height: 60px;
    background: var(--bg-surface);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-md);
    color: var(--text-primary);
    font-size: 1.5rem;
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-fast);
    display: flex;
    align-items: center;
    justify-content: center;
}

.num-btn:hover {
    background: var(--bg-tertiary);
    border-color: var(--border-secondary);
    transform: translateY(-1px);
    box-shadow: var(--shadow-sm);
}

.num-btn:active {
    transform: translateY(0);
}

.num-btn.zero {
    grid-column: 1 / -1;
}

.input-actions {
    display: grid;
    grid-template-columns: 1fr 1fr 2fr;
    gap: var(--spacing-sm);
}

.action-btn {
    padding: var(--spacing-sm);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-md);
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-fast);
    font-size: 0.875rem;
}

.action-btn.clear {
    background: var(--accent-warning);
    color: white;
    border-color: var(--accent-warning);
}

.action-btn.undo {
    background: var(--bg-surface);
    color: var(--text-primary);
}

.action-btn.submit {
    background: var(--accent-success);
    color: white;
    border-color: var(--accent-success);
}

.action-btn:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: var(--shadow-sm);
}

.action-btn:disabled {
    background: var(--bg-surface);
    color: var(--text-muted);
    border-color: var(--border-primary);
    cursor: not-allowed;
    transform: none;
}

/* Calculator Mode Styles */
.calculator-display {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-sm);
    padding: var(--spacing-md);
}

.dart-breakdown {
    font-size: 1.125rem;
    color: var(--text-secondary);
    font-family: var(--font-family-mono);
    text-align: center;
    min-height: 1.5rem;
}

.dart-breakdown .placeholder {
    font-style: italic;
    color: var(--text-muted);
}

.calculator-total {
    font-size: 3rem;
    font-weight: 800;
    color: var(--accent-primary);
    font-feature-settings: 'tnum';
    line-height: 1;
}

.calculator-mode {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
}

.multiplier-section {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--spacing-sm);
}

.multiplier-btn {
    padding: var(--spacing-sm);
    background: var(--bg-surface);
    border: 2px solid var(--border-primary);
    border-radius: var(--radius-md);
    color: var(--text-primary);
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-fast);
    font-size: 0.875rem;
    min-height: 44px;
}

.multiplier-btn:hover {
    background: var(--bg-tertiary);
    border-color: var(--accent-primary);
}

.multiplier-btn.active {
    background: var(--accent-primary);
    color: white;
    border-color: var(--accent-primary);
    box-shadow: 0 0 8px var(--accent-primary);
}

.calculator-numbers {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: var(--spacing-xs);
    max-height: 200px;
    overflow-y: auto;
}

.calc-num-btn {
    padding: var(--spacing-sm);
    background: var(--bg-surface);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-md);
    color: var(--text-primary);
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-fast);
    font-size: 0.875rem;
    min-height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.calc-num-btn:hover {
    background: var(--bg-tertiary);
    border-color: var(--accent-primary);
    transform: translateY(-1px);
}

.calc-num-btn.special {
    background: var(--accent-secondary);
    color: white;
    border-color: var(--accent-secondary);
}

.calc-num-btn.special:hover {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
}

.calculator-actions {
    display: grid;
    grid-template-columns: 1fr 1fr 2fr;
    gap: var(--spacing-sm);
}

.calc-action-btn {
    padding: var(--spacing-sm);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-md);
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-fast);
    font-size: 0.875rem;
    min-height: 44px;
}

.calc-action-btn.remove {
    background: var(--accent-warning);
    color: white;
    border-color: var(--accent-warning);
}

.calc-action-btn.clear {
    background: var(--accent-error);
    color: white;
    border-color: var(--accent-error);
}

.calc-action-btn.submit {
    background: var(--accent-success);
    color: white;
    border-color: var(--accent-success);
}

.calc-action-btn:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: var(--shadow-sm);
}

.calc-action-btn:disabled {
    background: var(--bg-surface);
    color: var(--text-muted);
    border-color: var(--border-primary);
    cursor: not-allowed;
    transform: none;
}

.calc-mode-toggle {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--spacing-xs);
    margin-top: var(--spacing-md);
    padding: var(--spacing-xs);
    background: var(--bg-secondary);
    border-radius: var(--radius-md);
    border: 1px solid var(--border-primary);
}

.mode-toggle-btn {
    padding: var(--spacing-sm);
    background: transparent;
    border: none;
    border-radius: var(--radius-sm);
    color: var(--text-secondary);
    font-weight: 500;
    cursor: pointer;
    transition: all var(--transition-fast);
    font-size: 0.875rem;
}

.mode-toggle-btn:hover {
    background: var(--bg-surface);
    color: var(--text-primary);
}

.mode-toggle-btn.active {
    background: var(--accent-primary);
    color: white;
    box-shadow: var(--shadow-sm);
}

/* Quick Scores */
.quick-scores {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: var(--spacing-xs);
    padding: var(--spacing-md);
    background: var(--bg-elevated);
    border-radius: var(--radius-md);
    border: 1px solid var(--border-primary);
}

.quick-score-btn {
    padding: var(--spacing-sm);
    background: var(--bg-surface);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-md);
    color: var(--text-primary);
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-fast);
    font-size: 0.875rem;
    min-height: 44px;
}

.quick-score-btn:hover:not(:disabled) {
    background: var(--bg-tertiary);
    border-color: var(--accent-primary);
    transform: translateY(-1px);
}

.quick-score-btn.miss {
    background: var(--accent-error);
    color: white;
    border-color: var(--accent-error);
    grid-column: 1 / -1;
}

.quick-score-btn:disabled {
    background: var(--bg-secondary);
    color: var(--text-muted);
    cursor: not-allowed;
    transform: none;
}

/* Advanced Input - Tablet Optimized */
.advanced-input {
    background: var(--bg-elevated);
    border-radius: var(--radius-lg);
    padding: var(--spacing-lg);
    border: 2px solid var(--accent-primary);
    display: grid;
    grid-template-rows: auto 1fr;
    gap: var(--spacing-md);
}

.dart-input-header {
    text-align: center;
    margin-bottom: var(--spacing-sm);
}

.dart-input-header h3 {
    color: var(--accent-primary);
    margin-bottom: var(--spacing-xs);
    font-size: 1.25rem;
}

.current-player-info {
    font-size: 1rem;
    color: var(--text-secondary);
    font-weight: 500;
}

.dart-controls {
    display: grid;
    grid-template-columns: 1fr 1fr auto;
    gap: var(--spacing-sm);
    align-items: end;
}

.segment-select, .ring-select {
    padding: var(--spacing-sm);
    background: var(--bg-surface);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-md);
    color: var(--text-primary);
    font-size: 0.875rem;
}

.record-dart {
    padding: var(--spacing-sm) var(--spacing-md);
    background: var(--accent-primary);
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-fast);
    font-size: 0.875rem;
}

.record-dart:hover:not(:disabled) {
    background: var(--accent-secondary);
    transform: translateY(-1px);
}

.record-dart:disabled {
    background: var(--bg-surface);
    color: var(--text-muted);
    cursor: not-allowed;
}

/* Mode Toggle */
.mode-toggle {
    display: flex;
    justify-content: center;
    padding: var(--spacing-sm);
}

.toggle-switch {
    display: flex;
    align-items: center;
    gap: var(--spacing-md);
    cursor: pointer;
    font-weight: 500;
    color: var(--text-secondary);
}

.toggle-switch input {
    display: none;
}

.toggle-slider {
    width: 50px;
    height: 24px;
    background: var(--bg-surface);
    border-radius: var(--radius-full);
    position: relative;
    transition: all var(--transition-fast);
    border: 1px solid var(--border-primary);
}

.toggle-slider::before {
    content: '';
    position: absolute;
    top: 2px;
    left: 2px;
    width: 18px;
    height: 18px;
    background: var(--text-muted);
    border-radius: var(--radius-full);
    transition: all var(--transition-fast);
}

.toggle-switch input:checked + .toggle-slider {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
}

.toggle-switch input:checked + .toggle-slider::before {
    transform: translateX(26px);
    background: white;
}

/* Match Controls */
.match-controls {
    display: flex;
    gap: var(--spacing-md);
    justify-content: center;
    padding: var(--spacing-sm);
}

.control-btn {
    padding: var(--spacing-sm) var(--spacing-lg);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-md);
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-fast);
    font-size: 0.875rem;
}

.control-btn.secondary {
    background: var(--bg-elevated);
    color: var(--text-primary);
}

.control-btn.danger {
    background: var(--accent-error);
    color: white;
    border-color: var(--accent-error);
}

.control-btn:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow-sm);
}

/* Match Finished Overlay */
.match-finished-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    backdrop-filter: blur(4px);
}

.finish-modal {
    background: var(--bg-elevated);
    border-radius: var(--radius-xl);
    padding: var(--spacing-2xl);
    text-align: center;
    border: 1px solid var(--border-primary);
    box-shadow: var(--shadow-xl);
    max-width: 400px;
    width: 90vw;
}

.finish-modal h2 {
    color: var(--accent-success);
    font-size: 2rem;
    margin-bottom: var(--spacing-lg);
}

.winner-name {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: var(--spacing-md);
}

.final-result {
    font-size: 3rem;
    font-weight: 800;
    color: var(--accent-primary);
    margin-bottom: var(--spacing-xl);
    font-feature-settings: 'tnum';
}

.finish-save-btn {
    padding: var(--spacing-lg) var(--spacing-2xl);
    background: var(--accent-success);
    color: white;
    border: none;
    border-radius: var(--radius-md);
    font-size: 1.125rem;
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-normal);
}

.finish-save-btn:hover {
    background: #059669;
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}

  /* Tablet Optimizations */
 @@media (max-width: 1024px) and (min-width: 769px) {
     .scoring-board {
         grid-template-rows: auto auto 1fr auto;
         gap: var(--spacing-sm);
         padding: var(--spacing-sm);
     }
     
     .score-input {
         grid-template-columns: 1fr 1.5fr;
         gap: var(--spacing-md);
         padding: var(--spacing-md);
     }
     
     .quick-scores {
         grid-template-columns: repeat(4, 1fr);
         padding: var(--spacing-sm);
     }
     
     .input-score {
         font-size: 3rem;
     }
     
     .calculator-numbers {
         grid-template-columns: repeat(5, 1fr);
         max-height: 180px;
     }
     
     .calculator-total {
         font-size: 2.5rem;
     }
 }
 
 /* Mobile Portrait */
 @@media (max-width: 768px) {
     .scoring-board {
         grid-template-rows: auto auto 1fr auto auto;
         padding: var(--spacing-sm);
         gap: var(--spacing-sm);
     }
     
     .score-header {
         grid-template-columns: 1fr;
         gap: var(--spacing-sm);
         text-align: center;
         padding: var(--spacing-md);
     }
     
     .player-section {
         padding: var(--spacing-sm);
     }
     
     .player-score {
         font-size: 2.5rem;
     }
     
     .score-input {
         grid-template-columns: 1fr;
         gap: var(--spacing-sm);
         padding: var(--spacing-sm);
     }
     
     .input-score {
         font-size: 2.5rem;
     }
     
     .num-btn {
         height: 50px;
         font-size: 1.125rem;
     }
     
     .quick-scores {
         grid-template-columns: repeat(3, 1fr);
         gap: var(--spacing-xs);
         padding: var(--spacing-sm);
     }
     
     .dart-controls {
         grid-template-columns: 1fr;
         gap: var(--spacing-xs);
     }
     
     .calculator-numbers {
         grid-template-columns: repeat(4, 1fr);
         max-height: 160px;
     }
     
     .calculator-actions {
         grid-template-columns: 1fr;
         gap: var(--spacing-xs);
     }
 }
 
 @@media (max-width: 480px) {
     .player-selection {
         flex-direction: column;
         gap: var(--spacing-md);
     }
     
     .vs-text {
         order: 2;
         margin: var(--spacing-sm) 0;
     }
     
     .number-pad {
         gap: var(--spacing-xs);
     }
     
     .num-btn {
         height: 45px;
         font-size: 1rem;
     }
     
     .calculator-numbers {
         grid-template-columns: repeat(3, 1fr);
         max-height: 200px;
     }
     
     .multiplier-section {
         grid-template-columns: 1fr;
         gap: var(--spacing-xs);
     }
     
     .calc-mode-toggle {
         grid-template-columns: 1fr;
         gap: var(--spacing-xs);
     }
 }
</style>

@code {
    private List<PlayerModel> players = new();
    private List<LiveMatch> activeMatches = new();
    private LiveMatch? currentMatch;
    private int selectedHomePlayerId = 0;
    private int selectedAwayPlayerId = 0;
    private int inputScore = 0;
    private string errorMessage = string.Empty;
    
    // Advanced Rule Engine
    private DartsRuleEngine? dartsEngine;
    private bool useAdvancedRuleEngine = false; // Default to basic mode
    private string selectedSegment = string.Empty;
    private string selectedRing = string.Empty;
    
    // Calculator Mode
    private bool useCalculatorMode = false;
    private string selectedMultiplier = "S"; // Single, Double, Triple
    private List<DartScore> calculatorDarts = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPlayers();
        await LoadActiveMatches();
    }
    
    private async Task LoadPlayers()
    {
        var playerResults = await PlayerRepo.GetPlayersAsync();
        players = playerResults.ToList();
        
        if (!players.Any())
        {
            players = new List<PlayerModel>
            {
                new() { Id = 1, Name = "John Smith", EloNumber = 1200 },
                new() { Id = 2, Name = "Mike Johnson", EloNumber = 1150 },
                new() { Id = 3, Name = "Sarah Wilson", EloNumber = 1300 },
                new() { Id = 4, Name = "Dave Brown", EloNumber = 1100 },
                new() { Id = 5, Name = "Lisa Davis", EloNumber = 1250 }
            };
        }
    }
    
    private async Task LoadActiveMatches()
    {
        activeMatches = await LiveMatchService.GetActiveMatchesAsync();
    }
    
    private async Task StartMatch()
    {
        if (selectedHomePlayerId > 0 && selectedAwayPlayerId > 0)
        {
            currentMatch = await LiveMatchService.CreateMatchAsync(selectedHomePlayerId, selectedAwayPlayerId);
            
            if (useAdvancedRuleEngine && currentMatch != null)
            {
                dartsEngine = new DartsRuleEngine(currentMatch.HomePlayerName, currentMatch.AwayPlayerName);
            }
            
            StateHasChanged();
        }
    }
    
    private async Task ResumeMatch(int matchId)
    {
        currentMatch = await LiveMatchService.GetMatchAsync(matchId);
        
        if (useAdvancedRuleEngine && currentMatch != null)
        {
            dartsEngine = new DartsRuleEngine(currentMatch.HomePlayerName, currentMatch.AwayPlayerName);
        }
        
        StateHasChanged();
    }
    
    private async Task RecordScore(int score)
    {
        if (currentMatch == null || !CanRecordScore())
        {
            return;
        }

        var currentPlayerScore = currentMatch.GetPlayerScore(currentMatch.CurrentPlayerId);
        var ruleResult = DartsRuleEngine.ValidateThrow(currentPlayerScore, score);

        if (!ruleResult.IsValid)
        {
            errorMessage = ruleResult.ErrorMessage;
            StateHasChanged();
            return;
        }
        
        errorMessage = string.Empty;
        
        var success = await LiveMatchService.RecordThrowAsync(currentMatch.Id, currentMatch.CurrentPlayerId, score, 3);
        
        if (success)
        {
            currentMatch = await LiveMatchService.GetMatchAsync(currentMatch.Id);
            ClearInput();
            StateHasChanged();
        }
        else
        {
            errorMessage = "Failed to record throw. Please try again.";
            StateHasChanged();
        }
    }
    
    private async Task SetAndSubmitScore(int score)
    {
        inputScore = score;
        await RecordScore(score);
    }
    
    private async Task UndoLastThrow()
    {
        if (currentMatch != null)
        {
            await LiveMatchService.UndoLastThrowAsync(currentMatch.Id, currentMatch.CurrentPlayerId);
            currentMatch = await LiveMatchService.GetMatchAsync(currentMatch.Id);
            errorMessage = string.Empty;
            StateHasChanged();
        }
    }
    
    private async Task SaveMatch()
    {
        if (currentMatch != null && currentMatch.IsFinished)
        {
            await LiveMatchService.FinishMatchAsync(currentMatch.Id);
            currentMatch = null;
            await LoadActiveMatches();
            StateHasChanged();
        }
    }
    
    private void EndMatch()
    {
        currentMatch = null;
        errorMessage = string.Empty;
        StateHasChanged();
    }
    
    private void BackToSetup()
    {
        currentMatch = null;
        selectedHomePlayerId = 0;
        selectedAwayPlayerId = 0;
        errorMessage = string.Empty;
        StateHasChanged();
    }
    
    // Input Methods
    private void AppendDigit(int digit)
    {
        if (inputScore == 0)
        {
            inputScore = digit;
        }
        else
        {
            int newScore = inputScore * 10 + digit;
            if (newScore <= 180)
            {
                inputScore = newScore;
            }
        }
        
        errorMessage = string.Empty;
        StateHasChanged();
    }
    
    private void ClearInput()
    {
        inputScore = 0;
        errorMessage = string.Empty;
        StateHasChanged();
    }
    
    private bool CanRecordScore()
    {
        return currentMatch != null && !currentMatch.IsFinished && currentMatch.CanThrow;
    }
    
    // Advanced Mode Methods
    private async Task OnRuleEngineToggled()
    {
        if (currentMatch == null) return;
        
        if (useAdvancedRuleEngine)
        {
            if (dartsEngine == null)
            {
                dartsEngine = new DartsRuleEngine(currentMatch.HomePlayerName, currentMatch.AwayPlayerName);
            }
            
            var players = dartsEngine.GetPlayers();
            var homePlayer = players.FirstOrDefault(p => p.Id == currentMatch.HomePlayerName);
            var awayPlayer = players.FirstOrDefault(p => p.Id == currentMatch.AwayPlayerName);
            
            if (homePlayer != null) homePlayer.Score = currentMatch.HomeCurrentScore;
            if (awayPlayer != null) awayPlayer.Score = currentMatch.AwayCurrentScore;
            
            var currentPlayerName = currentMatch.CurrentPlayerId == currentMatch.HomePlayerId 
                ? currentMatch.HomePlayerName 
                : currentMatch.AwayPlayerName;
            dartsEngine.SetCurrentPlayer(currentPlayerName);
            
            errorMessage = "Advanced mode activated - individual dart tracking enabled";
        }
        else
        {
            if (dartsEngine != null)
            {
                var players = dartsEngine.GetPlayers();
                var homePlayer = players.FirstOrDefault(p => p.Id == currentMatch.HomePlayerName);
                var awayPlayer = players.FirstOrDefault(p => p.Id == currentMatch.AwayPlayerName);
                
                if (homePlayer != null) currentMatch.HomeCurrentScore = homePlayer.Score;
                if (awayPlayer != null) currentMatch.AwayCurrentScore = awayPlayer.Score;
                
                var currentEnginePlayer = dartsEngine.GetCurrentPlayer();
                if (currentEnginePlayer.Id == currentMatch.HomePlayerName)
                {
                    currentMatch.CurrentPlayerId = currentMatch.HomePlayerId;
                }
                else if (currentEnginePlayer.Id == currentMatch.AwayPlayerName)
                {
                    currentMatch.CurrentPlayerId = currentMatch.AwayPlayerId;
                }
            }
            errorMessage = "Basic mode activated - simple turn-based scoring";
        }
        
        StateHasChanged();
        
        await Task.Delay(3000);
        if (errorMessage.Contains("mode activated"))
        {
            errorMessage = string.Empty;
            StateHasChanged();
        }
    }
    
    private async Task RecordIndividualDart()
    {
        if (dartsEngine == null || string.IsNullOrEmpty(selectedSegment) || string.IsNullOrEmpty(selectedRing))
        {
            return;
        }
        
        var currentPlayerId = dartsEngine.GetCurrentPlayer().Id;
        var result = dartsEngine.RecordThrow(currentPlayerId, selectedSegment, selectedRing);
        
        if (!result.IsValid)
        {
            errorMessage = result.ErrorMessage;
            StateHasChanged();
            return;
        }
        
        errorMessage = string.Empty;
        selectedSegment = string.Empty;
        selectedRing = string.Empty;
        
        if (result.IsBust)
        {
            errorMessage = $"BUST! {result.BustReason}";
        }
        else if (result.IsFinish)
        {
            errorMessage = $"GAME OVER! {result.WinnerId} wins!";
        }
        
        StateHasChanged();
        
        if (!result.IsBust && !result.IsFinish)
        {
            await Task.Delay(2000);
            errorMessage = string.Empty;
            StateHasChanged();
        }
    }
    
    // Calculator Mode Classes and Methods
    public class DartScore
    {
        public string Display { get; set; } = string.Empty;
        public int Value { get; set; }
    }
    
    private void SetCalculatorMode(bool enabled)
    {
        useCalculatorMode = enabled;
        if (enabled)
        {
            ClearCalculator();
        }
        else
        {
            ClearInput();
        }
        StateHasChanged();
    }
    
    private void SetMultiplier(string multiplier)
    {
        selectedMultiplier = multiplier;
        StateHasChanged();
    }
    
    private void AddDartScore(int baseScore)
    {
        if (calculatorDarts.Count >= 3)
        {
            errorMessage = "Maximum 3 darts per turn";
            StateHasChanged();
            return;
        }
        
        int value;
        string display;
        
        if (baseScore == 50) // Bull's eye
        {
            value = 50;
            display = "BULL";
        }
        else if (baseScore == 25) // Outer bull or single 25
        {
            if (selectedMultiplier == "D")
            {
                value = 50; // Double 25 = Bull
                display = "D25";
            }
            else
            {
                value = 25;
                display = selectedMultiplier == "S" ? "25" : $"{selectedMultiplier}25";
            }
        }
        else
        {
            // Regular numbers 1-20
            switch (selectedMultiplier)
            {
                case "S":
                    value = baseScore;
                    display = baseScore.ToString();
                    break;
                case "D":
                    value = baseScore * 2;
                    display = $"D{baseScore}";
                    break;
                case "T":
                    value = baseScore * 3;
                    display = $"T{baseScore}";
                    break;
                default:
                    value = baseScore;
                    display = baseScore.ToString();
                    break;
            }
        }
        
        // Check if total would exceed 180
        var currentTotal = calculatorDarts.Sum(d => d.Value);
        if (currentTotal + value > 180)
        {
            errorMessage = $"Total cannot exceed 180 (current: {currentTotal}, adding: {value})";
            StateHasChanged();
            return;
        }
        
        calculatorDarts.Add(new DartScore { Display = display, Value = value });
        errorMessage = string.Empty;
        StateHasChanged();
    }
    
    private void RemoveLastDart()
    {
        if (calculatorDarts.Any())
        {
            calculatorDarts.RemoveAt(calculatorDarts.Count - 1);
            errorMessage = string.Empty;
            StateHasChanged();
        }
    }
    
    private void ClearCalculator()
    {
        calculatorDarts.Clear();
        selectedMultiplier = "S";
        errorMessage = string.Empty;
        StateHasChanged();
    }
    
    private async Task SubmitCalculatorScore()
    {
        if (calculatorDarts.Any())
        {
            var totalScore = calculatorDarts.Sum(d => d.Value);
            await RecordScore(totalScore);
            
            if (string.IsNullOrEmpty(errorMessage)) // Only clear if no error occurred
            {
                ClearCalculator();
            }
        }
    }
} 